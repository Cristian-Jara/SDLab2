// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	JoinToGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error)
	StageOrRoundStarted(ctx context.Context, in *GameStarted, opts ...grpc.CallOption) (*GameStarted, error)
	PlayTheGame(ctx context.Context, in *Play, opts ...grpc.CallOption) (*Result, error)
	GetMoneyAmount(ctx context.Context, in *MoneyAmount, opts ...grpc.CallOption) (*MoneyAmount, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) JoinToGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/JoinToGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) StageOrRoundStarted(ctx context.Context, in *GameStarted, opts ...grpc.CallOption) (*GameStarted, error) {
	out := new(GameStarted)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/StageOrRoundStarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) PlayTheGame(ctx context.Context, in *Play, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/PlayTheGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMoneyAmount(ctx context.Context, in *MoneyAmount, opts ...grpc.CallOption) (*MoneyAmount, error) {
	out := new(MoneyAmount)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/GetMoneyAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	JoinToGame(context.Context, *JoinRequest) (*JoinReply, error)
	StageOrRoundStarted(context.Context, *GameStarted) (*GameStarted, error)
	PlayTheGame(context.Context, *Play) (*Result, error)
	GetMoneyAmount(context.Context, *MoneyAmount) (*MoneyAmount, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) JoinToGame(context.Context, *JoinRequest) (*JoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinToGame not implemented")
}
func (UnimplementedChatServiceServer) StageOrRoundStarted(context.Context, *GameStarted) (*GameStarted, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageOrRoundStarted not implemented")
}
func (UnimplementedChatServiceServer) PlayTheGame(context.Context, *Play) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayTheGame not implemented")
}
func (UnimplementedChatServiceServer) GetMoneyAmount(context.Context, *MoneyAmount) (*MoneyAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoneyAmount not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_JoinToGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinToGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/JoinToGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinToGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_StageOrRoundStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameStarted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).StageOrRoundStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/StageOrRoundStarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).StageOrRoundStarted(ctx, req.(*GameStarted))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_PlayTheGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Play)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).PlayTheGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/PlayTheGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).PlayTheGame(ctx, req.(*Play))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMoneyAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoneyAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMoneyAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/GetMoneyAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMoneyAmount(ctx, req.(*MoneyAmount))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinToGame",
			Handler:    _ChatService_JoinToGame_Handler,
		},
		{
			MethodName: "StageOrRoundStarted",
			Handler:    _ChatService_StageOrRoundStarted_Handler,
		},
		{
			MethodName: "PlayTheGame",
			Handler:    _ChatService_PlayTheGame_Handler,
		},
		{
			MethodName: "GetMoneyAmount",
			Handler:    _ChatService_GetMoneyAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat.proto",
}
